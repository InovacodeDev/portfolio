#!/bin/bash

# Pre-push hook to validate frozen lockfile
# This ensures that pnpm-lock.yaml is consistent and prevents accidental dependency changes

set -e

echo "ðŸ”’ Validating frozen lockfile..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}âœ“${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}âš ${NC} $1"
}

print_error() {
    echo -e "${RED}âœ—${NC} $1"
}

# Check if pnpm-lock.yaml exists
if [ ! -f "pnpm-lock.yaml" ]; then
    print_error "pnpm-lock.yaml not found!"
    exit 1
fi

# Get the current branch
current_branch=$(git branch --show-current)
print_status "Current branch: $current_branch"

# Check if we're pushing to main/master branches
remote=$1
url=$2

# Read the refs being pushed
while read local_ref local_sha remote_ref remote_sha; do
    # Extract branch name from remote ref
    branch_name=$(echo "$remote_ref" | sed 's|refs/heads/||')
    
    # Only validate for main/master branches or if lockfile has changes
    if [[ "$branch_name" == "main" || "$branch_name" == "master" ]]; then
        print_status "Validating lockfile for critical branch: $branch_name"
        
        # Check if lockfile has been modified in the current push
        if git diff --name-only "$remote_sha..$local_sha" | grep -q "pnpm-lock.yaml"; then
            print_warning "pnpm-lock.yaml has changes in this push"
            
            # Validate that lockfile is consistent with package.json files
            print_status "Running pnpm install --frozen-lockfile to validate consistency..."
            
            if ! pnpm install --frozen-lockfile; then
                print_error "Frozen lockfile validation failed!"
                print_error "The pnpm-lock.yaml file is inconsistent with package.json files."
                print_error "Please run 'pnpm install' to update the lockfile and commit the changes."
                exit 1
            fi
            
            print_status "Lockfile validation passed"
        else
            print_status "No lockfile changes detected"
        fi
    fi
done

# Additional validation: Check if there are any uncommitted changes to package.json files
uncommitted_package_files=$(git status --porcelain | grep -E "package\.json$" | wc -l)
if [ "$uncommitted_package_files" -gt 0 ]; then
    print_error "Uncommitted changes detected in package.json files!"
    print_error "Please commit all package.json changes before pushing."
    exit 1
fi

# Check if lockfile is newer than package.json files
print_status "Checking lockfile freshness..."

lockfile_time=$(stat -f %m pnpm-lock.yaml 2>/dev/null || stat -c %Y pnpm-lock.yaml 2>/dev/null)

# Find all package.json files and check their modification times
stale_packages=""
while IFS= read -r -d '' package_file; do
    package_time=$(stat -f %m "$package_file" 2>/dev/null || stat -c %Y "$package_file" 2>/dev/null)
    if [ "$package_time" -gt "$lockfile_time" ]; then
        stale_packages="$stale_packages\n  - $package_file"
    fi
done < <(find . -name "package.json" -not -path "./node_modules/*" -print0)

if [ -n "$stale_packages" ]; then
    print_error "The following package.json files are newer than pnpm-lock.yaml:"
    echo -e "$stale_packages"
    print_error "Please run 'pnpm install' to update the lockfile."
    exit 1
fi

# Final validation: Verify that the lockfile format is correct
print_status "Validating lockfile format..."
if ! pnpm install --frozen-lockfile --ignore-scripts; then
    print_error "Lockfile format validation failed!"
    print_error "The pnpm-lock.yaml file appears to be corrupted or invalid."
    exit 1
fi

print_status "All frozen lockfile validations passed! ðŸŽ‰"
print_status "Push proceeding..."

exit 0