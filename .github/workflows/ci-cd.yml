name: CI/CD Pipeline

on:
    push:
        branches: [main, develop]
    pull_request:
        branches: [main]

env:
    NODE_VERSION: "18"
    PNPM_VERSION: "8"

jobs:
    # Job 1: Lint and Test
    lint-and-test:
        name: Lint and Test
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}

            - name: Install pnpm
              uses: pnpm/action-setup@v2
              with:
                  version: ${{ env.PNPM_VERSION }}

            - name: Get pnpm store directory
              shell: bash
              run: |
                  echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

            - name: Setup pnpm cache
              uses: actions/cache@v4
              with:
                  path: ${{ env.STORE_PATH }}
                  key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: |
                      ${{ runner.os }}-pnpm-store-

            - name: Install dependencies
              run: pnpm install --frozen-lockfile

            - name: Lint code
              run: pnpm turbo lint

            - name: Type check
              run: pnpm turbo type-check

            - name: Run tests
              run: pnpm turbo test

    # Job 2: Build Applications
    build:
        name: Build Applications
        runs-on: ubuntu-latest
        needs: lint-and-test

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}

            - name: Install pnpm
              uses: pnpm/action-setup@v2
              with:
                  version: ${{ env.PNPM_VERSION }}

            - name: Get pnpm store directory
              shell: bash
              run: |
                  echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

            - name: Setup pnpm cache
              uses: actions/cache@v4
              with:
                  path: ${{ env.STORE_PATH }}
                  key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: |
                      ${{ runner.os }}-pnpm-store-

            - name: Install dependencies
              run: pnpm install --frozen-lockfile

            - name: Build applications
              run: pnpm turbo build

            - name: Upload build artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: build-artifacts
                  path: |
                      apps/web/dist/
                      apps/api/dist/

    # Job 3: Deploy Frontend to Vercel (only on main branch)
    deploy-frontend:
        name: Deploy Frontend to Vercel
        runs-on: ubuntu-latest
        needs: build
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Deploy to Vercel
              uses: amondnet/vercel-action@v25
              with:
                  vercel-token: ${{ secrets.VERCEL_TOKEN }}
                  vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
                  vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
                  vercel-args: "--prod"

    # Job 4: Deploy Backend to Fly.io (only on main branch)
    deploy-backend:
        name: Deploy Backend to Fly.io
        runs-on: ubuntu-latest
        needs: build
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Fly.io CLI
              uses: superfly/flyctl-actions/setup-flyctl@master

            - name: Deploy to Fly.io
              run: flyctl deploy --remote-only
              env:
                  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
